--- libavcodec/h264_parser.c.orig	2019-04-01 13:16:31.000000000 +0200
+++ libavcodec/h264_parser.c	2019-07-15 23:20:28.365062563 +0200
@@ -64,6 +64,112 @@
     int last_frame_num, last_picture_structure;
 } H264ParseContext;
 
+#include "ff_spsinfo.h" // MEANX
+#include <assert.h>
+ // MEANX
+int ff_h264_info(AVCodecParserContext *parser, int ticksPerFrame, ffSpsInfo *info);
+/**
+    \fn AVCodecParserContext
+ *  \brief find a valid sps,take the 1st one that look sok
+*/
+
+static SPS *findValidSPS(H264ParamSets *ps)
+{  
+   int i; 
+    
+   if(!ps) 
+   { 
+       av_log(NULL, AV_LOG_ERROR, "findValidSPS called with invalid data\n");
+       return NULL;
+   }
+   
+   for (i = 0; i<MAX_SPS_COUNT; i++)
+   {
+        AVBufferRef *ref=ps->sps_list[i];
+        if (ref)
+        {
+           SPS   *sps = ( SPS *)ref->data; // actually it's a const
+           if(sps->mb_width)
+               return sps;
+        }
+   }
+    av_log(NULL, AV_LOG_ERROR, "findValidSPS no valid SPS found\n");
+    return NULL;
+}
+/**
+ * 
+ * @param parser
+ * @param info
+ * @return 
+ */
+int ff_h264_info(AVCodecParserContext *parser, int ticksPerFrame, ffSpsInfo *info)
+{
+    H264ParseContext *ctx = parser->priv_data;    
+    int f;   
+    SPS *sps;
+    memset(info,0,sizeof(*info));
+    sps=findValidSPS(&(ctx->ps));
+        
+    if(!sps)
+    {
+        return 0;
+    }
+    info->width=sps->mb_width  * 16;
+    info->height=sps->mb_height * 16;
+    if(sps->timing_info_present_flag)
+    {
+            float scale=sps->time_scale ;
+            float ticks=sps->num_units_in_tick;
+            float fps = scale/ticks;
+            if(ticksPerFrame>1)
+                fps /= ticksPerFrame;
+            info->fps1000 = (uint32_t)(fps * 1000.);
+#undef printf
+            printf("Scale : %d, tick=%d, fps=%d\n",(int)scale,(int)ticks,(int)info->fps1000);
+    }else
+    {
+            printf("[H264] No timing information\n");
+            info->fps1000=25000;
+    }
+    // D.2.2 SEI Timing present if CpbDbpDelayPresentFlag=1 or pictStructPresent=1
+    // CpbDbpDelayPresentFlag =1 if nal_hdr or vcl_hrd or ???
+    f=sps->nal_hrd_parameters_present_flag | sps->vcl_hrd_parameters_present_flag;
+    info->hasStructInfo=f | sps->pic_struct_present_flag;
+    // Check whether POC is explicitely set in slice header
+    info->hasPocInfo=!sps->poc_type;
+    // While decoding SEI, if CpbDpbDelaysPresentFlags is there we skip cpb_removal_delay + dpb_output_delay
+
+    info->CpbDpbToSkip=0;
+    if(f)
+    {
+        info->CpbDpbToSkip=sps->cpb_removal_delay_length+sps->dpb_output_delay_length;
+    }
+    info->log2MaxFrameNum=sps->log2_max_frame_num;
+    info->log2MaxPocLsb=sps->log2_max_poc_lsb;
+    // Needed to determine the offset of poc_lsb
+    info->frameMbsOnlyFlag=sps->frame_mbs_only_flag;
+//#warning fixme sar vs dar
+    info->darNum=sps->sar.num;
+    info->darDen=sps->sar.den;
+/* */
+    printf("Crop L: %d\n",(int)sps->crop_left);
+    printf("Crop R: %d\n",(int)sps->crop_right);
+    printf("Crop T: %d\n",(int)sps->crop_top);
+    printf("Crop B: %d\n",(int)sps->crop_bottom);
+    if(sps->crop_bottom)
+    {
+         int mul=1;
+         printf("Taking crop bottom into account\n");
+         if(sps->frame_mbs_only_flag)
+              mul=1;
+         info->height-=sps->crop_bottom*mul;
+
+    }
+    info->refFrames=sps->ref_frame_count;
+    return 1;
+}
+// /MEANX
+
 
 static int h264_find_frame_end(H264ParseContext *p, const uint8_t *buf,
                                int buf_size, void *logctx)
