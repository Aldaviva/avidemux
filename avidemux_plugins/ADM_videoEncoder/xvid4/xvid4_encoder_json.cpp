// automatically generated by admSerialization.py, do not edit!
#include "ADM_default.h"
#include "ADM_paramList.h"
#include "ADM_coreJson.h"
#include "xvid4_encoder.h"
bool  xvid4_encoder_jserialize(const char *file, const xvid4_encoder *key){
admJson json;
json.addCompressParam("params",key->params);
json.addUint32("profile",key->profile);
json.addUint32("rdMode",key->rdMode);
json.addUint32("motionEstimation",key->motionEstimation);
json.addUint32("cqmMode",key->cqmMode);
json.addUint32("arMode",key->arMode);
json.addUint32("maxBFrame",key->maxBFrame);
json.addUint32("maxKeyFrameInterval",key->maxKeyFrameInterval);
json.addUint32("nbThreads",key->nbThreads);
json.addUint32("qMin",key->qMin);
json.addUint32("qMax",key->qMax);
json.addBool("rdOnBFrame",key->rdOnBFrame);
json.addBool("hqAcPred",key->hqAcPred);
json.addBool("optimizeChrome",key->optimizeChrome);
json.addBool("trellis",key->trellis);
json.addBool("useXvidFCC",key->useXvidFCC);
return json.dumpToFile(file);
};
bool  xvid4_encoder_jdeserialize(const char *file, const ADM_paramList *tmpl,xvid4_encoder *key){
admJsonToCouple json;
CONFcouple *c=json.readFromFile(file);
if(!c) {ADM_error("Cannot read json file");return false;}
bool r= ADM_paramLoadPartial(c,tmpl,key);
delete c;
return r;
};
