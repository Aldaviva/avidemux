// Generated by admPyClass.pl do not edit !
tp_obj zzpy__pyDFTimeStamp_get(tp_vm *vm)
{
  tp_obj self = tp_getraw(vm);
  IScriptEngine *engine = (IScriptEngine*)tp_get(vm, vm->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(vm);
  ADM_scriptDFTimeStampHelper *me=(ADM_scriptDFTimeStampHelper *)pm.asThis(&self, ADM_PYID_DF_INTEGER);
  char const *key = pm.asString();
  if (!strcmp(key, "value"))
  {
     if(!me) pm.raise("pyDFTimeStamp:No this!");
     return tp_number(me->value());
  }
  return tp_get(vm, self, tp_string(key));
}
tp_obj zzpy__pyDFTimeStamp_set(tp_vm *vm)
{
  tp_obj self = tp_getraw(vm);
  IScriptEngine *engine = (IScriptEngine*)tp_get(vm, vm->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(vm);
  ADM_scriptDFTimeStampHelper *me = (ADM_scriptDFTimeStampHelper *)pm.asThis(&self, ADM_PYID_DF_INTEGER);
  char const *key = pm.asString();
  if (!strcmp(key, "value"))
  {
     if(!me) pm.raise("pyDFTimeStamp:No this!");
     int val = pm.asInt();
     me->setValue(val);
     return tp_None;
  }
  return tp_None;
}
// Dctor
static void myDtorpyDFTimeStamp(tp_vm *vm,tp_obj self)
{
  ADM_scriptDFTimeStampHelper *cookie = (ADM_scriptDFTimeStampHelper *)self.data.val;
  if (cookie) delete cookie;
  self.data.val = NULL;
}
// Ctor (str int int)
static tp_obj myCtorpyDFTimeStamp(tp_vm *vm)
{
  tp_obj self = tp_getraw(vm);
  TinyParams pm(vm);
  const char *p0 = pm.asString();
  int p1 = pm.asInt();
  int p2 = pm.asInt();
  ADM_scriptDFTimeStampHelper *me = new ADM_scriptDFTimeStampHelper(p0,p1,p2);
  tp_obj cdata = tp_data(vm, ADM_PYID_DF_INTEGER, me);
  cdata.data.info->xfree = myDtorpyDFTimeStamp;
  tp_set(vm, self, tp_string("cdata"), cdata);
  return tp_None;
}
static tp_obj zzpy__pyDFTimeStamp_help(TP)
{
	PythonEngine *engine = (PythonEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;


	return tp_None;
};
tp_obj initClasspyDFTimeStamp(tp_vm *vm)
{
  tp_obj myClass = tp_class(vm);
  tp_set(vm,myClass, tp_string("__init__"), tp_fnc(vm,myCtorpyDFTimeStamp));
  tp_set(vm,myClass, tp_string("__set__"), tp_fnc(vm,zzpy__pyDFTimeStamp_set));
  tp_set(vm,myClass, tp_string("__get__"), tp_fnc(vm,zzpy__pyDFTimeStamp_get));
  tp_set(vm,myClass, tp_string("help"), tp_fnc(vm,zzpy__pyDFTimeStamp_help));
  return myClass;
}
