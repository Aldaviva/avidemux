// Generated by admPyClass.pl do not edit !
// fileWriteSelect -> str pyFileSelWrite (IEditor str ) 
static tp_obj zzpy_fileWriteSelect(TP)
 {
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  char *r =   pyFileSelWrite(p0,p1); 
  if(!r) pm.raise("pyGui : null pointer");

  tp_obj o = tp_string_copy(tp, r, strlen(r));
  ADM_dealloc(r);
  return o;
}
// displayError -> void pyDisplayError (IEditor str str ) 
static tp_obj zzpy_displayError(TP)
 {
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  const char *p2 = pm.asString();
  pyDisplayError(p0,p1,p2); 
 return tp_None;
}
// dirSelect -> str pyDirSelect (IEditor str ) 
static tp_obj zzpy_dirSelect(TP)
 {
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  char *r =   pyDirSelect(p0,p1); 
  if(!r) pm.raise("pyGui : null pointer");

  tp_obj o = tp_string_copy(tp, r, strlen(r));
  ADM_dealloc(r);
  return o;
}
// displayInfo -> void pyDisplayInfo (IEditor str str ) 
static tp_obj zzpy_displayInfo(TP)
 {
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  const char *p2 = pm.asString();
  pyDisplayInfo(p0,p1,p2); 
 return tp_None;
}
// fileReadSelect -> str pyFileSelRead (IEditor str ) 
static tp_obj zzpy_fileReadSelect(TP)
 {
  tp_obj self = tp_getraw(tp);
  IScriptEngine *engine = (IScriptEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(tp);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);

  IEditor *p0 = editor;
  const char *p1 = pm.asString();
  char *r =   pyFileSelRead(p0,p1); 
  if(!r) pm.raise("pyGui : null pointer");

  tp_obj o = tp_string_copy(tp, r, strlen(r));
  ADM_dealloc(r);
  return o;
}
tp_obj zzpy__pyGui_get(tp_vm *vm)
{
  tp_obj self = tp_getraw(vm);
  IScriptEngine *engine = (IScriptEngine*)tp_get(vm, vm->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(vm);
  void *me=(void *)pm.asThis(&self, ADM_PYID_GUI);
  char const *key = pm.asString();
  if (!strcmp(key, "fileWriteSelect"))
  {
     return tp_method(vm, self, zzpy_fileWriteSelect);
  }
  if (!strcmp(key, "displayError"))
  {
     return tp_method(vm, self, zzpy_displayError);
  }
  if (!strcmp(key, "dirSelect"))
  {
     return tp_method(vm, self, zzpy_dirSelect);
  }
  if (!strcmp(key, "displayInfo"))
  {
     return tp_method(vm, self, zzpy_displayInfo);
  }
  if (!strcmp(key, "fileReadSelect"))
  {
     return tp_method(vm, self, zzpy_fileReadSelect);
  }
  return tp_get(vm, self, tp_string(key));
}
tp_obj zzpy__pyGui_set(tp_vm *vm)
{
  tp_obj self = tp_getraw(vm);
  IScriptEngine *engine = (IScriptEngine*)tp_get(vm, vm->builtins, tp_string("userdata")).data.val;
  IEditor *editor = engine->editor();
  TinyParams pm(vm);
  void *me = (void *)pm.asThis(&self, ADM_PYID_GUI);
  char const *key = pm.asString();
  return tp_None;
}
// Dctor
static void myDtorpyGui(tp_vm *vm,tp_obj self)
{
}
// Ctor ()
static tp_obj myCtorpyGui(tp_vm *vm)
{
  tp_obj self = tp_getraw(vm);
  TinyParams pm(vm);
  void *me = NULL;
  tp_obj cdata = tp_data(vm, ADM_PYID_GUI, me);
  cdata.data.info->xfree = myDtorpyGui;
  tp_set(vm, self, tp_string("cdata"), cdata);
  return tp_None;
}
static tp_obj zzpy__pyGui_help(TP)
{
	PythonEngine *engine = (PythonEngine*)tp_get(tp, tp->builtins, tp_string("userdata")).data.val;

	engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "fileWriteSelect(IEditor,str)\n");
	engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "displayError(IEditor,str,str)\n");
	engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "dirSelect(IEditor,str)\n");
	engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "displayInfo(IEditor,str,str)\n");
	engine->callEventHandlers(IScriptEngine::Information, NULL, -1, "fileReadSelect(IEditor,str)\n");

	return tp_None;
};
tp_obj initClasspyGui(tp_vm *vm)
{
  tp_obj myClass = tp_class(vm);
  tp_set(vm,myClass, tp_string("__init__"), tp_fnc(vm,myCtorpyGui));
  tp_set(vm,myClass, tp_string("__set__"), tp_fnc(vm,zzpy__pyGui_set));
  tp_set(vm,myClass, tp_string("__get__"), tp_fnc(vm,zzpy__pyGui_get));
  tp_set(vm,myClass, tp_string("help"), tp_fnc(vm,zzpy__pyGui_help));
  return myClass;
}
